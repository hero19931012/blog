<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Huiming&#39;s Blog</title>
	<subtitle>Be a doer, not a dreamer.</subtitle>
	
	<link href="https://hero19931012.github.io/feed/feed.xml" rel="self"/>
	<link href="https://hero19931012.github.io/blog"/>
	<updated>2022-07-22T00:00:00-00:00</updated>
	<id></id>
	<author>
		<name>Huiming</name>
		<email></email>
	</author>
	
	<entry>
		<title>11ty 部落格部署紀錄</title>
		<link href="https://hero19931012.github.io/posts/11ty-deployment/"/>
		<updated>2022-02-20T00:00:00-00:00</updated>
		<id>https://hero19931012.github.io/posts/11ty-deployment/</id>
		<content type="html">
		  &lt;p&gt;受到 &lt;a href=&quot;https://pse.is/3vf88q&quot;&gt;「星巴哥文章推薦」開發全記錄 — 從 Hexo 到 11ty&lt;/a&gt; 與 &lt;a href=&quot;https://pse.is/3uztdr&quot;&gt;除了 hexo，也可以考慮用 eleventy 來寫技術部落格 - Huli&lt;/a&gt; 的啟發，決定動手架一個想了很久但都沒做的個人部落格。&lt;/p&gt;
&lt;h3 id=&quot;%E7%92%B0%E5%A2%83&quot;&gt;環境 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%92%B0%E5%A2%83&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;透過 &lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;google/eleventy-high-performance-blog&lt;/a&gt; 產生靜態網站，部署在 GitHub Pages 上。&lt;/p&gt;
&lt;h3 id=&quot;%E6%AD%A5%E9%A9%9F&quot;&gt;步驟 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%AD%A5%E9%A9%9F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;1.-%E5%BB%BA%E7%AB%8B-repository&quot;&gt;1. 建立 repository &lt;a class=&quot;direct-link&quot; href=&quot;#1.-%E5%BB%BA%E7%AB%8B-repository&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;用 &lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;high performance blog template&lt;/a&gt; 當作 template 製作一個自己的 repo，然後 clone 到 local&lt;/p&gt;
&lt;h4 id=&quot;2.-%E8%A8%AD%E5%AE%9A-github-actions&quot;&gt;2. 設定 GitHub Actions &lt;a class=&quot;direct-link&quot; href=&quot;#2.-%E8%A8%AD%E5%AE%9A-github-actions&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;參考 &lt;a href=&quot;https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/&quot;&gt;Eleventy and Github pages&lt;/a&gt; 設定 repo 在 commit 之後要執行的 actions。在編輯器中打開 &lt;code&gt;.github/workflows/build-and-test.yaml&lt;/code&gt;，加入一個 deploy 的 step:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Runs build and test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; CI&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;	 &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;main&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;	 &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;main&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;	 &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest&lt;br&gt;&lt;br&gt;	 &lt;span class=&quot;token key atrule&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token key atrule&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;		  &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;12.x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 14.x&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;	 &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Use Node.js $matrix.node&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;version&lt;br&gt;		  &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v1&lt;br&gt;		  &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;			 &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $matrix.node&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;version&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ci&lt;br&gt;&lt;br&gt;		&lt;span class=&quot;token comment&quot;&gt;# 加入下面部署的 action&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy&lt;br&gt;		  &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; peaceiris/actions&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages@v3&lt;br&gt;		  &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;			 &lt;span class=&quot;token key atrule&quot;&gt;deploy_key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $secrets.ACTIONS_DEPLOY_KEY&lt;br&gt;			 &lt;span class=&quot;token key atrule&quot;&gt;publish_dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./_site&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;secrets.ACTIONS_DEPLOY_KEY&lt;/code&gt; 待會會在 GitHub 上面設定。&lt;/p&gt;
&lt;h4 id=&quot;3.-%E8%A8%AD%E5%AE%9A%E5%85%A8%E5%9F%9F-path-prefix&quot;&gt;3. 設定全域 path prefix &lt;a class=&quot;direct-link&quot; href=&quot;#3.-%E8%A8%AD%E5%AE%9A%E5%85%A8%E5%9F%9F-path-prefix&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在 GitHub Pages 上部署，會有一個屬於自己的 domain &lt;code&gt;username.github.io&lt;/code&gt;，gh-pages 透過增加一層 subdomain 來區分不同的 repo，如果要訪問一個路徑 &lt;code&gt;path&lt;/code&gt;，必須用 &lt;code&gt;username.github.io/repo-name/path&lt;/code&gt;，才能正確存取，因此需要將專案裡所有的 link 加上一個 prefix。&lt;/p&gt;
&lt;p&gt;打開 &lt;code&gt;.eleventy.js&lt;/code&gt;，找到最下面 return 的部分，可以看到 subdirectory 的說明，把原本被註解的 &lt;code&gt;pathPrefix: &amp;quot;/&amp;quot;&lt;/code&gt; 取消註解，改成 repo name 就可以了。&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// If your site lives in a different subdirectory, change this.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Leading or trailing slashes are all normalized away, so don’t worry about those.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// If you don’t have a subdirectory, use &quot;&quot; or &quot;/&quot; (they do the same thing)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// This is only used for link URLs (it does not affect your file structure)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Best paired with the `url` filter: https://www.11ty.io/docs/filters/url/&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// You can also pass this in on the command line using `--pathprefix`&lt;/span&gt;&lt;br&gt;pathPrefix&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/repo-name&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;4.-%E7%94%A2%E7%94%9F%E8%88%87%E8%A8%AD%E5%AE%9A-deploy-key&quot;&gt;4. 產生與設定 Deploy key &lt;a class=&quot;direct-link&quot; href=&quot;#4.-%E7%94%A2%E7%94%9F%E8%88%87%E8%A8%AD%E5%AE%9A-deploy-key&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;終端機中用下面的指令產生 2 支檔案：&lt;strong&gt;gh-pages.pub&lt;/strong&gt; (public key) 和 &lt;strong&gt;gh-pages&lt;/strong&gt; (private key)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh-keygen -t rsa -b &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; -C &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config user.email&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; -f gh-pages -N &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;進入 repo Settings 頁面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hero19931012.github.io/img/11ty-deployment/settings-tab.png&quot; alt=&quot;settings-tab&quot;&gt;&lt;/p&gt;
&lt;p&gt;選擇 Security &amp;gt; Deploy Keys &amp;gt; Add deploy key&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hero19931012.github.io/img/11ty-deployment/deploy-key.png&quot; alt=&quot;deploy-key&quot;&gt;&lt;/p&gt;
&lt;p&gt;填入 title 與 key (複製 gh-pages.pub 的內容)，然後勾選 &lt;code&gt;Allow write access&lt;/code&gt;，允許修改權限&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hero19931012.github.io/img/11ty-deployment/add-deploy-key.png&quot; alt=&quot;add-deploy-key&quot;&gt;&lt;/p&gt;
&lt;p&gt;接著到 Security &amp;gt; Secrets &amp;gt; Actions，點選 New repository secret，將 Name 填入 ACTIONS_DEPLOY_KEY，key 則複製 gh-pages 的內容貼上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hero19931012.github.io/img/11ty-deployment/add-secret.png&quot; alt=&quot;add-secret&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;5.-commit-%E4%B8%A6%E6%8E%A8%E4%B8%8A-github&quot;&gt;5. Commit 並推上 GitHub &lt;a class=&quot;direct-link&quot; href=&quot;#5.-commit-%E4%B8%A6%E6%8E%A8%E4%B8%8A-github&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;回到本機，先把剛剛的修改 commit，然後 git push 上 Github&lt;/p&gt;
&lt;h4 id=&quot;6.-%E7%A2%BA%E8%AA%8D-action-%E6%9C%89%E6%AD%A3%E5%B8%B8%E5%9F%B7%E8%A1%8C&quot;&gt;6. 確認 Action 有正常執行 &lt;a class=&quot;direct-link&quot; href=&quot;#6.-%E7%A2%BA%E8%AA%8D-action-%E6%9C%89%E6%AD%A3%E5%B8%B8%E5%9F%B7%E8%A1%8C&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;檢查 repo Actions 頁面，可以看到所有正在執行或之前已經跑好的 workflows，並會根據 commit 來命名，這邊會看到 2 個分別是 CI 與 CodeQL 的 workflow，是 eleventy-high-performance-blog 內建的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hero19931012.github.io/img/11ty-deployment/default-actions.png&quot; alt=&quot;default-actions&quot;&gt;&lt;/p&gt;
&lt;p&gt;這 2 個跑好後會出現第 3 個名為 pages-build-deployment 的 workflow，是將網站部署到 gh-pages 的 workflow&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hero19931012.github.io/img/11ty-deployment/deploy-action.png&quot; alt=&quot;deploy-action&quot;&gt;&lt;/p&gt;
&lt;p&gt;點進去可以看 log 了解現在在什麼階段，完成後在 deploy 的區塊下會有部署完的網址，沒意外是 &lt;code&gt;https://username.github.io/repo-name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hero19931012.github.io/img/11ty-deployment/deploy-action-detail.png&quot; alt=&quot;deploy-action-detail&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;7.-%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90&quot;&gt;7. 部署完成 &lt;a class=&quot;direct-link&quot; href=&quot;#7.-%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;網址列輸入該網址，沒出現 404 而是以下畫面的話就是部署成功了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hero19931012.github.io/img/11ty-deployment/deploy-success.png&quot; alt=&quot;deploy-success&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%BE%8C%E8%A8%98&quot;&gt;後記 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BE%8C%E8%A8%98&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這篇記錄只提到如何透過 GitHub Pages 搭配 GitHub Actions 來部署 11ty 網站，沒提到設計與客製頁面的開發是由於我只想先快速簡單弄一個可以放筆記的平台，所以目前都還沒客製自己的頁面，之後有需要會慢慢新增。&lt;/p&gt;
&lt;p&gt;然後部署在 GitHub Pages 上有一個已知但不知道如何解決的問題，就是圖片在 markdown 裡面沒辦法套用 path prefix 的設定，也就會抓不到圖，猜測如果有買 domain 應該就可以解決這個問題，但我沒有 domain，所以目前只能 workaround，就是利用 11ty 的 markdown 會先經過 liquid template engine 編譯的設定，直接在 markdown 的圖片路徑上使用 filter，寫起來如下 (不含 backslash)：&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;![demo](\{\{ &#39;/img/first-post/abc.png&#39; | url \}\})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;缺點就是不太好看，也沒辦法 preview (還是可以用 npm run watch 在瀏覽器裡 preview 啦)，我研究了一整天，想要找到能夠對 markdown 裡面的 img 路徑加上 prefix 的方法，但是沒找到，甚至還想說自己寫個 markdown-it 的 plugin 好了，後來覺得太麻煩作罷，就先接受這樣子了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;2022/4/10 更新，我後來還是買了域名，所以就可以照正常方式使用，不需透過 liquid 預先編輯。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上就是粗略的 11ty 部落格架設記錄。&lt;/p&gt;
&lt;h3 id=&quot;references&quot;&gt;References &lt;a class=&quot;direct-link&quot; href=&quot;#references&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/&quot;&gt;Eleventy and Github pages | LinkedIn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rockyourcode.com/how-to-deploy-eleventy-to-github-pages-with-github-actions/&quot;&gt;How to Deploy Eleventy to GitHub Pages With GitHub Actions | rockyourcode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;google/eleventy-high-performance-blog: A high performance blog template for the 11ty static site generator. (github.com)&lt;/a&gt;&lt;/p&gt;

			
		</content>
	</entry>
	
	<entry>
		<title>設定 GitHub SSH 連線，並在同一台電腦設定不同 GitHub 帳號</title>
		<link href="https://hero19931012.github.io/posts/ssh-and-multiple-git-account/"/>
		<updated>2022-07-22T00:00:00-00:00</updated>
		<id>https://hero19931012.github.io/posts/ssh-and-multiple-git-account/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SSH key 用來與 GitHub 連線，不用像網頁登入需要輸入帳號密碼。&lt;/p&gt;
&lt;p&gt;由於工作與個人在 GitHub 使用不同的帳號，且公司有提供筆電，即使只在家使用也自由度大增，有時想做點自己的小專案，會需要在不同帳號間轉換 (其實是很懶不想一直換電腦)，所以參考別人的方法完成設定 SSH 連線與切換帳號，完成後以我自己的角度來記錄這篇心得。&lt;/p&gt;
&lt;h2 id=&quot;%E6%AD%A5%E9%A9%9F&quot;&gt;步驟 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%AD%A5%E9%A9%9F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打開 terminal 透過&lt;code&gt;ssh-keygen&lt;/code&gt; 搭配 &lt;code&gt;RSA&lt;/code&gt; 演算法產生一對金鑰 (官方文件用的是 &lt;code&gt;ed25519&lt;/code&gt;，&lt;code&gt;RSA&lt;/code&gt; 對較舊的系統相容性較好，詳細可閱讀參考文件)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; ~/.ssh&lt;br&gt;ssh-keygen -t rsa -C &lt;span class=&quot;token string&quot;&gt;&quot;userName@address&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;中間會詢問要存放的路徑與檔名，通常預設路徑在會 &lt;code&gt;/Users/{username}/.ssh/id_rsa&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Enter a &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; to save the key &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/Users/username/.ssh/id_rsa&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Press enter&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;username 是目前的使用者名稱 (由於剛剛執行過 &lt;code&gt;cd ~/.ssh&lt;/code&gt;，可以直接用 &lt;code&gt;pwd&lt;/code&gt; 取得當前路徑)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id_rsa&lt;/code&gt; 是根據目前使用的演算法產生&lt;/li&gt;
&lt;li&gt;不輸入直接 Enter 套用預設值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後提示輸入 passphrase (不輸入也可，直接 Enter)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Enter passphrase &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; no passphrase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Type a passphrase&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Enter same passphrase again: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Type passphrase again&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接著會產生 2 支檔案：&lt;code&gt;id_rsa&lt;/code&gt; 與 &lt;code&gt;id_rsa.pub&lt;/code&gt;，接下來把 &lt;code&gt;id_rsa.pub&lt;/code&gt; 的內容貼到 GitHub 上新增一把公鑰&lt;/p&gt;
&lt;p&gt;Settings &amp;gt; SSH and GPG keys&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/QG7envj.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;New SSH keys&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/kkNtkQA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;取一個名字然後把 &lt;code&gt;id_rsa.pub&lt;/code&gt; 的內容貼上來&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回到 terminal，把私鑰 &lt;code&gt;id_rsa&lt;/code&gt; 加入 &lt;code&gt;ssh-agent&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由於我們需要存取 2 個帳號，所以再把 1-3 步再做一次&lt;/p&gt;
&lt;p&gt;金鑰名字另外取，例如 &lt;code&gt;id_rsa_personal&lt;/code&gt;，再去另一個 GitHub 帳號添加一次公鑰&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 vim 打開 ~/.ssh/config&lt;/p&gt;
&lt;p&gt;如果沒有這個檔案可以先執行 &lt;code&gt;touch config&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; config&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;輸入下面內容&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#Default GitHub&lt;/span&gt;&lt;br&gt;Host github.com                      &lt;span class=&quot;token comment&quot;&gt;# 代號&lt;/span&gt;&lt;br&gt; HostName github.com                 &lt;span class=&quot;token comment&quot;&gt;# IP or domain name&lt;/span&gt;&lt;br&gt; User &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt;                            &lt;span class=&quot;token comment&quot;&gt;# username =&gt; git@github.com[]&lt;/span&gt;&lt;br&gt; IdentityFile ~/.ssh/id_rsa          &lt;span class=&quot;token comment&quot;&gt;# 指定的金鑰&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;#New GitHub&lt;/span&gt;&lt;br&gt;Host github-personal&lt;br&gt; HostName github.com&lt;br&gt; User &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt;&lt;br&gt; IdentityFile ~/.ssh/id_rsa_personal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;意思是針對不同的 host 使用不同的 key 進行 SSH 連線，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;測試連線&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$ssh&lt;/span&gt; -T git@github.com&lt;br&gt;Hi User1&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; You’ve successfully authenticated, but GitHub does not provide shell access.&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token variable&quot;&gt;$ssh&lt;/span&gt; -T git@github-personal&lt;br&gt;Hi User2&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; You’ve successfully authenticated, but GitHub does not provide shell access.&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone repository&lt;/p&gt;
&lt;p&gt;選擇 SSH 的方式 clone 就可以了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/p2vdSxz.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git@github.com:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;repository&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git@github-personal:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;repository&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference &lt;a class=&quot;direct-link&quot; href=&quot;#reference&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@hyWang/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%8F%B0%E9%9B%BB%E8%85%A6%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%80%8Bgit%E5%B8%B3%E8%99%9F-907c8eadbabf&quot;&gt;如何在一台電腦使用多個 Git 帳號&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&quot;&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection&quot;&gt;Testing your SSH connection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@honglong/%E9%81%B8%E6%93%87-ssh-key-%E7%9A%84%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95-70ca45c94d8e&quot;&gt;選擇 SSH key 的加密演算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chusiang.gitbooks.io/working-on-gnu-linux/content/20.ssh_config.html&quot;&gt;增進 SSH 使用效率 - ssh_config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/%E6%B5%A6%E5%B3%B6%E5%A4%AA%E9%83%8E%E7%9A%84%E6%B0%B4%E6%97%8F%E7%BC%B8/how-to-setup-ssh-config-%E4%BD%BF%E7%94%A8-ssh-%E8%A8%AD%E5%AE%9A%E6%AA%94-74ad46f99818&quot;&gt;How to setup SSH config ：使用 SSH 設定檔簡化指令與連線網址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://linuxize.com/post/using-the-ssh-config-file/&quot;&gt;Using the SSH Config File&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

			
		</content>
	</entry>
</feed>
