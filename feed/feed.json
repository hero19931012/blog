{
  "version": "https://jsonfeed.org/version/1",
  "title": "Huiming&#39;s Blog",
  "home_page_url": "https://hero19931012.github.io/blog",
  "feed_url": "",
  "description": "",
  "author": {
    "name": "Huiming",
    "url": ""
  },
  "items": [{
      "id": "https://hero19931012.github.io/posts/ssh-and-multiple-git-account/",
      "url": "https://hero19931012.github.io/posts/ssh-and-multiple-git-account/",
      "title": "設定 GitHub SSH 連線，並在同一台電腦設定不同 GitHub 帳號",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>SSH key 用來與 GitHub 連線，不用像網頁登入需要輸入帳號密碼。</p>\n<p>由於工作與個人在 GitHub 使用不同的帳號，且公司有提供筆電，即使只在家使用也自由度大增，有時想做點自己的小專案，會需要在不同帳號間轉換 (其實是很懶不想一直換電腦)，所以參考別人的方法完成設定 SSH 連線與切換帳號，完成後以我自己的角度來記錄這篇心得。</p>\n<h2 id=\"%E6%AD%A5%E9%A9%9F\">步驟 <a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F\">#</a></h2>\n<ol>\n<li>\n<p>打開 terminal 透過<code>ssh-keygen</code> 搭配 <code>RSA</code> 演算法產生一對金鑰 (官方文件用的是 <code>ed25519</code>，<code>RSA</code> 對較舊的系統相容性較好，詳細可閱讀參考文件)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/.ssh<br>ssh-keygen -t rsa -C <span class=\"token string\">\"userName@address\"</span></code></pre>\n<p>中間會詢問要存放的路徑與檔名，通常預設路徑在會 <code>/Users/{username}/.ssh/id_rsa</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span>Enter a <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/Users/username/.ssh/id_rsa<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">[</span>Press enter<span class=\"token punctuation\">]</span></code></pre>\n<ul>\n<li>username 是目前的使用者名稱 (由於剛剛執行過 <code>cd ~/.ssh</code>，可以直接用 <code>pwd</code> 取得當前路徑)</li>\n<li><code>id_rsa</code> 是根據目前使用的演算法產生</li>\n<li>不輸入直接 Enter 套用預設值</li>\n</ul>\n<p>然後提示輸入 passphrase (不輸入也可，直接 Enter)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> Enter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">[</span>Type a passphrase<span class=\"token punctuation\">]</span><br><span class=\"token operator\">></span> Enter same passphrase again: <span class=\"token punctuation\">[</span>Type passphrase again<span class=\"token punctuation\">]</span></code></pre>\n</li>\n<li>\n<p>接著會產生 2 支檔案：<code>id_rsa</code> 與 <code>id_rsa.pub</code>，接下來把 <code>id_rsa.pub</code> 的內容貼到 GitHub 上新增一把公鑰</p>\n<p>Settings &gt; SSH and GPG keys</p>\n<p><img src=\"https://i.imgur.com/QG7envj.png\" alt=\"\"></p>\n<p>New SSH keys</p>\n<p><img src=\"https://i.imgur.com/kkNtkQA.png\" alt=\"\"></p>\n<p>取一個名字然後把 <code>id_rsa.pub</code> 的內容貼上來</p>\n</li>\n<li>\n<p>回到 terminal，把私鑰 <code>id_rsa</code> 加入 <code>ssh-agent</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ssh-add ~/.ssh/id_rsa</code></pre>\n</li>\n<li>\n<p>由於我們需要存取 2 個帳號，所以再把 1-3 步再做一次</p>\n<p>金鑰名字另外取，例如 <code>id_rsa_personal</code>，再去另一個 GitHub 帳號添加一次公鑰</p>\n</li>\n<li>\n<p>用 vim 打開 ~/.ssh/config</p>\n<p>如果沒有這個檔案可以先執行 <code>touch config</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> config</code></pre>\n<p>輸入下面內容</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#Default GitHub</span><br>Host github.com                      <span class=\"token comment\"># 代號</span><br> HostName github.com                 <span class=\"token comment\"># IP or domain name</span><br> User <span class=\"token function\">git</span>                            <span class=\"token comment\"># username => git@github.com[]</span><br> IdentityFile ~/.ssh/id_rsa          <span class=\"token comment\"># 指定的金鑰</span><br><br><span class=\"token comment\">#New GitHub</span><br>Host github-personal<br> HostName github.com<br> User <span class=\"token function\">git</span><br> IdentityFile ~/.ssh/id_rsa_personal</code></pre>\n<p>意思是針對不同的 host 使用不同的 key 進行 SSH 連線，</p>\n</li>\n<li>\n<p>測試連線</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token variable\">$ssh</span> -T git@github.com<br>Hi User1<span class=\"token operator\">!</span> You’ve successfully authenticated, but GitHub does not provide shell access.<br><br><span class=\"token variable\">$ssh</span> -T git@github-personal<br>Hi User2<span class=\"token operator\">!</span> You’ve successfully authenticated, but GitHub does not provide shell access.</code></pre>\n</li>\n<li>\n<p>Clone repository</p>\n<p>選擇 SSH 的方式 clone 就可以了</p>\n<p><img src=\"https://i.imgur.com/p2vdSxz.png\" alt=\"\"></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:<span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>repository<span class=\"token punctuation\">}</span><br><span class=\"token function\">git</span> clone git@github-personal:<span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>repository<span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ol>\n<h2 id=\"reference\">Reference <a class=\"direct-link\" href=\"#reference\">#</a></h2>\n<ol>\n<li><a href=\"https://medium.com/@hyWang/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%8F%B0%E9%9B%BB%E8%85%A6%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%80%8Bgit%E5%B8%B3%E8%99%9F-907c8eadbabf\">如何在一台電腦使用多個 Git 帳號</a></li>\n<li><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">Generating a new SSH key and adding it to the ssh-agent</a></li>\n<li><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection\">Testing your SSH connection</a></li>\n<li><a href=\"https://medium.com/@honglong/%E9%81%B8%E6%93%87-ssh-key-%E7%9A%84%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95-70ca45c94d8e\">選擇 SSH key 的加密演算法</a></li>\n<li><a href=\"https://chusiang.gitbooks.io/working-on-gnu-linux/content/20.ssh_config.html\">增進 SSH 使用效率 - ssh_config</a></li>\n<li><a href=\"https://medium.com/%E6%B5%A6%E5%B3%B6%E5%A4%AA%E9%83%8E%E7%9A%84%E6%B0%B4%E6%97%8F%E7%BC%B8/how-to-setup-ssh-config-%E4%BD%BF%E7%94%A8-ssh-%E8%A8%AD%E5%AE%9A%E6%AA%94-74ad46f99818\">How to setup SSH config ：使用 SSH 設定檔簡化指令與連線網址</a></li>\n<li><a href=\"https://linuxize.com/post/using-the-ssh-config-file/\">Using the SSH Config File</a></li>\n</ol>\n",
      "date_published": "2022-07-22T00:00:00-00:00"
    },{
      "id": "https://hero19931012.github.io/posts/11ty-deployment/",
      "url": "https://hero19931012.github.io/posts/11ty-deployment/",
      "title": "11ty 部落格部署紀錄",
      "content_html": "<p>受到 <a href=\"https://pse.is/3vf88q\">「星巴哥文章推薦」開發全記錄 — 從 Hexo 到 11ty</a> 與 <a href=\"https://pse.is/3uztdr\">除了 hexo，也可以考慮用 eleventy 來寫技術部落格 - Huli</a> 的啟發，決定動手架一個想了很久但都沒做的個人部落格。</p>\n<h3 id=\"%E7%92%B0%E5%A2%83\">環境 <a class=\"direct-link\" href=\"#%E7%92%B0%E5%A2%83\">#</a></h3>\n<p>透過 <a href=\"https://github.com/google/eleventy-high-performance-blog\">google/eleventy-high-performance-blog</a> 產生靜態網站，部署在 GitHub Pages 上。</p>\n<h3 id=\"%E6%AD%A5%E9%A9%9F\">步驟 <a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F\">#</a></h3>\n<h4 id=\"1.-%E5%BB%BA%E7%AB%8B-repository\">1. 建立 repository <a class=\"direct-link\" href=\"#1.-%E5%BB%BA%E7%AB%8B-repository\">#</a></h4>\n<p>用 <a href=\"https://github.com/google/eleventy-high-performance-blog\">high performance blog template</a> 當作 template 製作一個自己的 repo，然後 clone 到 local</p>\n<h4 id=\"2.-%E8%A8%AD%E5%AE%9A-github-actions\">2. 設定 GitHub Actions <a class=\"direct-link\" href=\"#2.-%E8%A8%AD%E5%AE%9A-github-actions\">#</a></h4>\n<p>參考 <a href=\"https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/\">Eleventy and Github pages</a> 設定 repo 在 commit 之後要執行的 actions。在編輯器中打開 <code>.github/workflows/build-and-test.yaml</code>，加入一個 deploy 的 step:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Runs build and test</span><br><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CI<br><br><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span><br>\t <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span><br>  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span><br>\t <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span><br><br><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span><br>\t <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest<br><br>\t <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span><br>\t\t  <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>12.x<span class=\"token punctuation\">,</span> 14.x<span class=\"token punctuation\">]</span><br><br>\t <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2<br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $matrix.node<span class=\"token punctuation\">-</span>version<br>\t\t  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1<br>\t\t  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>\t\t\t <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $matrix.node<span class=\"token punctuation\">-</span>version<br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install<br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build<span class=\"token punctuation\">-</span>ci<br><br>\t\t<span class=\"token comment\"># 加入下面部署的 action</span><br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy<br>\t\t  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3<br>\t\t  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>\t\t\t <span class=\"token key atrule\">deploy_key</span><span class=\"token punctuation\">:</span> $secrets.ACTIONS_DEPLOY_KEY<br>\t\t\t <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site</code></pre>\n<p><code>secrets.ACTIONS_DEPLOY_KEY</code> 待會會在 GitHub 上面設定。</p>\n<h4 id=\"3.-%E8%A8%AD%E5%AE%9A%E5%85%A8%E5%9F%9F-path-prefix\">3. 設定全域 path prefix <a class=\"direct-link\" href=\"#3.-%E8%A8%AD%E5%AE%9A%E5%85%A8%E5%9F%9F-path-prefix\">#</a></h4>\n<p>在 GitHub Pages 上部署，會有一個屬於自己的 domain <code>username.github.io</code>，gh-pages 透過增加一層 subdomain 來區分不同的 repo，如果要訪問一個路徑 <code>path</code>，必須用 <code>username.github.io/repo-name/path</code>，才能正確存取，因此需要將專案裡所有的 link 加上一個 prefix。</p>\n<p>打開 <code>.eleventy.js</code>，找到最下面 return 的部分，可以看到 subdirectory 的說明，把原本被註解的 <code>pathPrefix: &quot;/&quot;</code> 取消註解，改成 repo name 就可以了。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// If your site lives in a different subdirectory, change this.</span><br><span class=\"token comment\">// Leading or trailing slashes are all normalized away, so don’t worry about those.</span><br><br><span class=\"token comment\">// If you don’t have a subdirectory, use \"\" or \"/\" (they do the same thing)</span><br><span class=\"token comment\">// This is only used for link URLs (it does not affect your file structure)</span><br><span class=\"token comment\">// Best paired with the `url` filter: https://www.11ty.io/docs/filters/url/</span><br><br><span class=\"token comment\">// You can also pass this in on the command line using `--pathprefix`</span><br>pathPrefix<span class=\"token operator\">:</span> <span class=\"token string\">\"/repo-name\"</span></code></pre>\n<h4 id=\"4.-%E7%94%A2%E7%94%9F%E8%88%87%E8%A8%AD%E5%AE%9A-deploy-key\">4. 產生與設定 Deploy key <a class=\"direct-link\" href=\"#4.-%E7%94%A2%E7%94%9F%E8%88%87%E8%A8%AD%E5%AE%9A-deploy-key\">#</a></h4>\n<p>終端機中用下面的指令產生 2 支檔案：<strong>gh-pages.pub</strong> (public key) 和 <strong>gh-pages</strong> (private key)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -t rsa -b <span class=\"token number\">4096</span> -C <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> config user.email<span class=\"token variable\">)</span></span>\"</span> -f gh-pages -N <span class=\"token string\">\"\"</span></code></pre>\n<p>進入 repo Settings 頁面</p>\n<p><img src=\"/img/11ty-deployment/settings-tab.png\" alt=\"settings-tab\"></p>\n<p>選擇 Security &gt; Deploy Keys &gt; Add deploy key</p>\n<p><img src=\"/img/11ty-deployment/deploy-key.png\" alt=\"deploy-key\"></p>\n<p>填入 title 與 key (複製 gh-pages.pub 的內容)，然後勾選 <code>Allow write access</code>，允許修改權限</p>\n<p><img src=\"/img/11ty-deployment/add-deploy-key.png\" alt=\"add-deploy-key\"></p>\n<p>接著到 Security &gt; Secrets &gt; Actions，點選 New repository secret，將 Name 填入 ACTIONS_DEPLOY_KEY，key 則複製 gh-pages 的內容貼上</p>\n<p><img src=\"/img/11ty-deployment/add-secret.png\" alt=\"add-secret\"></p>\n<h4 id=\"5.-commit-%E4%B8%A6%E6%8E%A8%E4%B8%8A-github\">5. Commit 並推上 GitHub <a class=\"direct-link\" href=\"#5.-commit-%E4%B8%A6%E6%8E%A8%E4%B8%8A-github\">#</a></h4>\n<p>回到本機，先把剛剛的修改 commit，然後 git push 上 Github</p>\n<h4 id=\"6.-%E7%A2%BA%E8%AA%8D-action-%E6%9C%89%E6%AD%A3%E5%B8%B8%E5%9F%B7%E8%A1%8C\">6. 確認 Action 有正常執行 <a class=\"direct-link\" href=\"#6.-%E7%A2%BA%E8%AA%8D-action-%E6%9C%89%E6%AD%A3%E5%B8%B8%E5%9F%B7%E8%A1%8C\">#</a></h4>\n<p>檢查 repo Actions 頁面，可以看到所有正在執行或之前已經跑好的 workflows，並會根據 commit 來命名，這邊會看到 2 個分別是 CI 與 CodeQL 的 workflow，是 eleventy-high-performance-blog 內建的</p>\n<p><img src=\"/img/11ty-deployment/default-actions.png\" alt=\"default-actions\"></p>\n<p>這 2 個跑好後會出現第 3 個名為 pages-build-deployment 的 workflow，是將網站部署到 gh-pages 的 workflow</p>\n<p><img src=\"/img/11ty-deployment/deploy-action.png\" alt=\"deploy-action\"></p>\n<p>點進去可以看 log 了解現在在什麼階段，完成後在 deploy 的區塊下會有部署完的網址，沒意外是 <code>https://username.github.io/repo-name</code></p>\n<p><img src=\"/img/11ty-deployment/deploy-action-detail.png\" alt=\"deploy-action-detail\"></p>\n<h4 id=\"7.-%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90\">7. 部署完成 <a class=\"direct-link\" href=\"#7.-%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90\">#</a></h4>\n<p>網址列輸入該網址，沒出現 404 而是以下畫面的話就是部署成功了</p>\n<p><img src=\"/img/11ty-deployment/deploy-success.png\" alt=\"deploy-success\"></p>\n<h3 id=\"%E5%BE%8C%E8%A8%98\">後記 <a class=\"direct-link\" href=\"#%E5%BE%8C%E8%A8%98\">#</a></h3>\n<p>這篇記錄只提到如何透過 GitHub Pages 搭配 GitHub Actions 來部署 11ty 網站，沒提到設計與客製頁面的開發是由於我只想先快速簡單弄一個可以放筆記的平台，所以目前都還沒客製自己的頁面，之後有需要會慢慢新增。</p>\n<p>然後部署在 GitHub Pages 上有一個已知但不知道如何解決的問題，就是圖片在 markdown 裡面沒辦法套用 path prefix 的設定，也就會抓不到圖，猜測如果有買 domain 應該就可以解決這個問題，但我沒有 domain，所以目前只能 workaround，就是利用 11ty 的 markdown 會先經過 liquid template engine 編譯的設定，直接在 markdown 的圖片路徑上使用 filter，寫起來如下 (不含 backslash)：</p>\n<pre class=\"language-md\"><code class=\"language-md\">![demo](\\{\\{ '/img/first-post/abc.png' | url \\}\\})</code></pre>\n<p>缺點就是不太好看，也沒辦法 preview (還是可以用 npm run watch 在瀏覽器裡 preview 啦)，我研究了一整天，想要找到能夠對 markdown 裡面的 img 路徑加上 prefix 的方法，但是沒找到，甚至還想說自己寫個 markdown-it 的 plugin 好了，後來覺得太麻煩作罷，就先接受這樣子了。</p>\n<blockquote>\n<p><em>2022/4/10 更新，我後來還是買了域名，所以就可以照正常方式使用，不需透過 liquid 預先編輯。</em></p>\n</blockquote>\n<p>以上就是粗略的 11ty 部落格架設記錄。</p>\n<h3 id=\"references\">References <a class=\"direct-link\" href=\"#references\">#</a></h3>\n<p><a href=\"https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/\">Eleventy and Github pages | LinkedIn</a></p>\n<p><a href=\"https://www.rockyourcode.com/how-to-deploy-eleventy-to-github-pages-with-github-actions/\">How to Deploy Eleventy to GitHub Pages With GitHub Actions | rockyourcode</a></p>\n<p><a href=\"https://github.com/google/eleventy-high-performance-blog\">google/eleventy-high-performance-blog: A high performance blog template for the 11ty static site generator. (github.com)</a></p>\n",
      "date_published": "2022-02-20T00:00:00-00:00"
    }
  ]
}
