{
  "version": "https://jsonfeed.org/version/1",
  "title": "Huiming&#39;s Blog",
  "home_page_url": "https://hero19931012.github.io/blog",
  "feed_url": "",
  "description": "",
  "author": {
    "name": "Huiming",
    "url": ""
  },
  "items": [{
      "id": "https://hero19931012.github.io/posts/data-structure-introduction/",
      "url": "https://hero19931012.github.io/posts/data-structure-introduction/",
      "title": "資料結構筆記01 什麼是資料結構",
      "content_html": "<h2 id=\"%E5%AE%9A%E7%BE%A9\">定義 <a class=\"direct-link\" href=\"#%E5%AE%9A%E7%BE%A9\">#</a></h2>\n<blockquote>\n<p>整理資料的方式。<br>\n如何在電腦中存放資料。</p>\n</blockquote>\n<h2 id=\"%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7\">基本特性 <a class=\"direct-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7\">#</a></h2>\n<p>假設不同的資料結構就像是抽屣、衣櫥或冰箱等儲存空間，這個空間最主要的功能就是存放資料，所以一定都會有 <code>INSERT</code> (放資料進去) 與 <code>GET</code> (讀資料出來，不是刪除) 這 2 個方法。</p>\n<h3 id=\"%E5%85%B6%E4%BB%96%E7%9A%84%E5%AD%98%E5%8F%96%E6%96%B9%E6%B3%95\">其他的存取方法 <a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E7%9A%84%E5%AD%98%E5%8F%96%E6%96%B9%E6%B3%95\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>CONSTRUCT</code></td>\n<td style=\"text-align:center\">如何建構</td>\n</tr>\n<tr>\n<td><code>REMOVE</code></td>\n<td style=\"text-align:center\">刪除資料</td>\n</tr>\n<tr>\n<td><code>UPDATE</code></td>\n<td style=\"text-align:center\">更新資料</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B\">為什麼我們需要資料結構 <a class=\"direct-link\" href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B\">#</a></h2>\n<blockquote>\n<p>何謂好的程式？以最少資源完成預期的任務。</p>\n</blockquote>\n<p>當程式執行時，所需要的資源可大致分成 Space resource (空間), Computation resource (運算) 與其他類型的資源，其中資料結構主要影響空間上的資源，演算法主要影響運算上所需的資源 。</p>\n<ul>\n<li><code>Space</code>: memory, disk, transmission bandwidth =&gt; cared by <strong>Data structure</strong></li>\n<li><code>Computation</code>: CPU, GPU, computation power =&gt; cared by <strong>Algorithm</strong></li>\n<li><code>Other</code>: manpower, budget =&gt; cared by management</li>\n</ul>\n<h2 id=\"%E5%AF%A6%E4%BD%9C%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%9A%84-trade-off\">實作資料結構的 trade off <a class=\"direct-link\" href=\"#%E5%AF%A6%E4%BD%9C%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%9A%84-trade-off\">#</a></h2>\n<p>沒有完美的資料結構可以適用所有情況，只有當下適合用的結構，選擇不同結構的同時往往都有所謂的 trade off，可能有下面幾種：</p>\n<ul>\n<li>fast get &lt;=&gt; slow insert: 取出來較快，但寫入較慢</li>\n<li>fast get &lt;=&gt; more space: 取出來較快，但空間需求較大</li>\n<li>較難的實作 &lt;=&gt; 較好的效能</li>\n</ul>\n<p>在實作之前還是要思考<strong>值不值得</strong>，如果非常小的專案或是很少人用的服務，其實根本不需要花這麼大的力氣去提升效能。</p>\n<h2 id=\"reference\">Reference <a class=\"direct-link\" href=\"#reference\">#</a></h2>\n<p><a href=\"https://www.youtube.com/watch?v=upMnTq9JB2c\">NTU DSA 2022: Course Introduction / Algorithm</a></p>\n",
      "date_published": "2022-07-26T00:00:00-00:00"
    },{
      "id": "https://hero19931012.github.io/posts/ssh-and-multiple-git-account/",
      "url": "https://hero19931012.github.io/posts/ssh-and-multiple-git-account/",
      "title": "設定 GitHub SSH 連線，並在同一台電腦設定不同 GitHub 帳號",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>SSH key 用來與 GitHub 連線，不用像網頁登入需要輸入帳號密碼。</p>\n<p>由於工作與個人在 GitHub 使用不同的帳號，且公司有提供筆電，即使只在家使用也自由度大增，有時想做點自己的小專案，會需要在不同帳號間轉換 (其實是很懶不想一直換電腦)，所以參考別人的方法完成設定 SSH 連線與切換帳號，完成後以我自己的角度來記錄這篇心得。</p>\n<h2 id=\"%E6%AD%A5%E9%A9%9F\">步驟 <a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F\">#</a></h2>\n<ol>\n<li>\n<p>打開 terminal 透過<code>ssh-keygen</code> 搭配 <code>RSA</code> 演算法產生一對金鑰 (官方文件用的是 <code>ed25519</code>，<code>RSA</code> 對較舊的系統相容性較好，詳細可閱讀參考文件)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/.ssh<br>ssh-keygen -t rsa -C <span class=\"token string\">\"userName@address\"</span></code></pre>\n<p>中間會詢問要存放的路徑與檔名，通常預設路徑在會 <code>/Users/{username}/.ssh/id_rsa</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span>Enter a <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/Users/username/.ssh/id_rsa<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">[</span>Press enter<span class=\"token punctuation\">]</span></code></pre>\n<ul>\n<li>username 是目前的使用者名稱 (由於剛剛執行過 <code>cd ~/.ssh</code>，可以直接用 <code>pwd</code> 取得當前路徑)</li>\n<li><code>id_rsa</code> 是根據目前使用的演算法產生</li>\n<li>不輸入直接 Enter 套用預設值</li>\n</ul>\n<p>然後提示輸入 passphrase (不輸入也可，直接 Enter)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> Enter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">[</span>Type a passphrase<span class=\"token punctuation\">]</span><br><span class=\"token operator\">></span> Enter same passphrase again: <span class=\"token punctuation\">[</span>Type passphrase again<span class=\"token punctuation\">]</span></code></pre>\n</li>\n<li>\n<p>接著會產生 2 支檔案：<code>id_rsa</code> 與 <code>id_rsa.pub</code>，接下來把 <code>id_rsa.pub</code> 的內容貼到 GitHub 上新增一把公鑰</p>\n<p>Settings &gt; SSH and GPG keys</p>\n<p><img src=\"https://i.imgur.com/QG7envj.png\" alt=\"\"></p>\n<p>New SSH keys</p>\n<p><img src=\"https://i.imgur.com/kkNtkQA.png\" alt=\"\"></p>\n<p>取一個名字然後把 <code>id_rsa.pub</code> 的內容貼上來</p>\n</li>\n<li>\n<p>回到 terminal，把私鑰 <code>id_rsa</code> 加入 <code>ssh-agent</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ssh-add ~/.ssh/id_rsa</code></pre>\n</li>\n<li>\n<p>由於我們需要存取 2 個帳號，所以再把 1-3 步再做一次</p>\n<p>金鑰名字另外取，例如 <code>id_rsa_personal</code>，再去另一個 GitHub 帳號添加一次公鑰</p>\n</li>\n<li>\n<p>用 vim 打開 ~/.ssh/config</p>\n<p>如果沒有這個檔案可以先執行 <code>touch config</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> config</code></pre>\n<p>輸入下面內容</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#Default GitHub</span><br>Host github.com                      <span class=\"token comment\"># 代號</span><br> HostName github.com                 <span class=\"token comment\"># IP or domain name</span><br> User <span class=\"token function\">git</span>                            <span class=\"token comment\"># username => git@github.com[]</span><br> IdentityFile ~/.ssh/id_rsa          <span class=\"token comment\"># 指定的金鑰</span><br><br><span class=\"token comment\">#New GitHub</span><br>Host github-personal<br> HostName github.com<br> User <span class=\"token function\">git</span><br> IdentityFile ~/.ssh/id_rsa_personal</code></pre>\n<p>意思是針對不同的 host 使用不同的 key 進行 SSH 連線，</p>\n</li>\n<li>\n<p>測試連線</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token variable\">$ssh</span> -T git@github.com<br>Hi User1<span class=\"token operator\">!</span> You’ve successfully authenticated, but GitHub does not provide shell access.<br><br><span class=\"token variable\">$ssh</span> -T git@github-personal<br>Hi User2<span class=\"token operator\">!</span> You’ve successfully authenticated, but GitHub does not provide shell access.</code></pre>\n</li>\n<li>\n<p>Clone repository</p>\n<p>選擇 SSH 的方式 clone 就可以了</p>\n<p><img src=\"https://i.imgur.com/p2vdSxz.png\" alt=\"\"></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:<span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>repository<span class=\"token punctuation\">}</span><br><span class=\"token function\">git</span> clone git@github-personal:<span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">{</span>repository<span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ol>\n<h2 id=\"reference\">Reference <a class=\"direct-link\" href=\"#reference\">#</a></h2>\n<ol>\n<li><a href=\"https://medium.com/@hyWang/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%8F%B0%E9%9B%BB%E8%85%A6%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%80%8Bgit%E5%B8%B3%E8%99%9F-907c8eadbabf\">如何在一台電腦使用多個 Git 帳號</a></li>\n<li><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">Generating a new SSH key and adding it to the ssh-agent</a></li>\n<li><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection\">Testing your SSH connection</a></li>\n<li><a href=\"https://medium.com/@honglong/%E9%81%B8%E6%93%87-ssh-key-%E7%9A%84%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95-70ca45c94d8e\">選擇 SSH key 的加密演算法</a></li>\n<li><a href=\"https://chusiang.gitbooks.io/working-on-gnu-linux/content/20.ssh_config.html\">增進 SSH 使用效率 - ssh_config</a></li>\n<li><a href=\"https://medium.com/%E6%B5%A6%E5%B3%B6%E5%A4%AA%E9%83%8E%E7%9A%84%E6%B0%B4%E6%97%8F%E7%BC%B8/how-to-setup-ssh-config-%E4%BD%BF%E7%94%A8-ssh-%E8%A8%AD%E5%AE%9A%E6%AA%94-74ad46f99818\">How to setup SSH config ：使用 SSH 設定檔簡化指令與連線網址</a></li>\n<li><a href=\"https://linuxize.com/post/using-the-ssh-config-file/\">Using the SSH Config File</a></li>\n</ol>\n",
      "date_published": "2022-07-22T00:00:00-00:00"
    },{
      "id": "https://hero19931012.github.io/posts/2022-interviews/",
      "url": "https://hero19931012.github.io/posts/2022-interviews/",
      "title": "2022 1 年經驗非本科後端工程師面試記錄",
      "content_html": "<h2 id=\"summary\">Summary <a class=\"direct-link\" href=\"#summary\">#</a></h2>\n<h3 id=\"%E5%90%84%E9%9A%8E%E6%AE%B5%E6%95%B8%E9%87%8F\">各階段數量 <a class=\"direct-link\" href=\"#%E5%90%84%E9%9A%8E%E6%AE%B5%E6%95%B8%E9%87%8F\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>階段</th>\n<th>數量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主動投遞</td>\n<td>50-55 (104, cakeResume, yourator, email)</td>\n</tr>\n<tr>\n<td>公司邀請</td>\n<td>6 (只計相關性質)</td>\n</tr>\n<tr>\n<td>面試</td>\n<td>9</td>\n</tr>\n<tr>\n<td>offer</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"%E9%9D%A2%E8%A9%A6%E9%9A%8E%E6%AE%B5%E8%88%87%E7%B5%90%E6%9E%9C\">面試階段與結果 <a class=\"direct-link\" href=\"#%E9%9D%A2%E8%A9%A6%E9%9A%8E%E6%AE%B5%E8%88%87%E7%B5%90%E6%9E%9C\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>公司</th>\n<th>階段</th>\n<th>結果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>夢想動畫</td>\n<td>一面</td>\n<td>offer get，預算太低，低到不可思議，不發年終，比我現在年薪少了 10 幾萬，不這樣說看不出來有多誇張</td>\n</tr>\n<tr>\n<td>歐立威</td>\n<td>電話</td>\n<td>無聲，hr 主動邀請，電話中說要幫我安排面試，然後就沒了，傻眼</td>\n</tr>\n<tr>\n<td>台灣角川</td>\n<td>視訊、二面 (智力測驗 + 面談)</td>\n<td>offer get，等了一個多月才二面，package 比我報的少了一點，勉強可以接受</td>\n</tr>\n<tr>\n<td>創譽科技</td>\n<td>一面</td>\n<td>offer get，因為是接案公司後來婉拒</td>\n</tr>\n<tr>\n<td>軟領科技</td>\n<td>一面</td>\n<td>預算太低，用 AWS 用得很強，CTO 人也不錯，但 pay 實在不行，我現在薪水已經是他們 3-5 年年資的水準，我的想法是如果你們 JD 上寫 3-5 年經歷 5w-8w，我只有 1 年，你大可已讀，但找我去面試代表經歷跟薪資範圍有達成共識，不應該在找我去面試後，相談甚歡，結果最後用年資來砍我薪水，要這樣不如一開始就不要找我面試</td>\n</tr>\n<tr>\n<td>EZ_Table</td>\n<td>一面 (JS &amp; AWS 測驗 + 面談)</td>\n<td>預算太低，寫測驗說給 30 分鐘，但過了一個小時還沒人來，還要我自己去問，體驗蠻差的，薪水部分他們也是說要 3-7 年才能給到我要的數字</td>\n</tr>\n<tr>\n<td>Welly</td>\n<td>前測，一面 (智力測驗 + 面談)</td>\n<td>婉拒，工作內容沒興趣，舊 ERP 翻新，1 人後端</td>\n</tr>\n<tr>\n<td>齊舵管理顧問</td>\n<td>視訊</td>\n<td>婉拒，駐點</td>\n</tr>\n<tr>\n<td>Ematic</td>\n<td>視訊</td>\n<td>婉拒，想找 SALES + RD 集合體，表達想專注在後端發展後就結束面談了</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"%E6%AA%A2%E8%A8%8E\">檢討 <a class=\"direct-link\" href=\"#%E6%AA%A2%E8%A8%8E\">#</a></h2>\n<p>記錄一些自己覺得有待加強的部分，以供日後的自己參考。</p>\n<h3 id=\"%E6%99%82%E6%A9%9F%E9%BB%9E\">時機點 <a class=\"direct-link\" href=\"#%E6%99%82%E6%A9%9F%E9%BB%9E\">#</a></h3>\n<p>這次年後求職，比起上次在 2020 年底求職，有感覺到低薪跟沒發展性的職缺比較多，不知道跟年後有部分人會領完年終然後積極地找機會有多少關係，但就整體求職的體驗而言，不像 2020 那樣有獲得較好的回饋，只能說時機點不是很好，以後應該會儘量在 Q3、Q4 找。</p>\n<h3 id=\"%E5%B1%A5%E6%AD%B7\">履歷 <a class=\"direct-link\" href=\"#%E5%B1%A5%E6%AD%B7\">#</a></h3>\n<p>再來是履歷部分，由於是後端，然後在公司也只主力開發一項產品 (也不知道賣得好不好，應該是賣不好)，所以能寫的真的不多，頂多就描述一下幾個專案中開發的功能跟用到的技術，寫的時候參考了很多別人的寫法，結果是看起來尚可，給人的感覺是會寫程式，但看不出到底到在專案中負責多少？貢獻多少東西？也許應該更著重在我在這個專案中的貢獻以及比例。</p>\n<p>做過的 project 我在 2020 是用當時跟別人合作的 <a href=\"https://github.com/hero19931012/mtr04-express-parlando\">Parlando</a>，面試的時候獲得不少回饋，還有被稱讚做得很好看，超有成就感的，只是這次我就沒放，因為這個專案以現在的角度來看已經不堪拿出來 demo 了，像是有些風格不統一的寫法、架構不明確、有 bug 等等，都是讓我不想放出來的原因，除了這個專案比較完整以外，就沒別的可以放了，所以專案的部分留空，真的蠻可惜的。</p>\n<p>如果是我自己要徵人，看到這個履歷只有一年然後只開發一項產品，也沒 side project，的確是會覺得沒什麼亮點，也會擔心只做一年就要走是不是有什麼問題？所以這邊的檢討就是還是得做 side project，比起鉅細糜遺的描述公司的專案做了什麼，直接看 code 更可以快速地了解一個人的程度。</p>\n<h3 id=\"%E9%9D%A2%E8%A9%A6\">面試 <a class=\"direct-link\" href=\"#%E9%9D%A2%E8%A9%A6\">#</a></h3>\n<p>最後是面試的部分，分成面談與技術測驗，面談我覺得沒什麼好講的，我認為我都講得不錯，就是有些前後邏輯要再順一下。</p>\n<p>測驗部分有遇到專業測驗、智力測驗 (還有裝成性向測驗的智力測驗)、Live coding。專業測驗如果是面試前的測驗，通常有做點功課都可以寫得出來，智力測驗就看不懂的先跳過，寫完再回頭想剛剛沒想出來的，但我常遇到答案明顯選不出來的，莫明其妙，有測驗要篩人我可以認同，但是事前或到現場寫好之後，才在說薪水給不起或是要做我沒興趣的工作真的蠻無言的。</p>\n<p>真的需要檢討的就屬 Live coding 了，這次求職遇到一次，考了 2 題在 LeetCode 中應該會屬於 easy 的題目，由於沒特別準備刷題，加上緊張的關係，想當然是解不出來，但是過程中我有盡可能地把我的思考講出來，讓面試官知道我在往哪個方向思考，面試官人其實也很 nice 會給提示，雖然最後 2 題都沒答對，連面試官都跟我說不好意思對一個非本科的考演算法，我說我才不好意思XD 結果收到 2 面通知的時候，人資還特別說面試官很看好我，當下真的覺得怎麼可能哈哈，最後就是順利地通過 2 面拿到 offer 了。</p>\n<p>自這次經驗起我就決定開始刷 LeetCode 了，畢竟不是每個面試官都這麼仁慈的。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90%E8%88%87%E7%9B%AE%E6%A8%99\">總結與目標 <a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90%E8%88%87%E7%9B%AE%E6%A8%99\">#</a></h2>\n<p>總結就是，找工作不是當你被迫或發現應該換工作的時候才在準備，這件事應該是持續地、每天地在進行，課程上到一半？書只讀一半？side project 只寫了一半？但是機會不會等你準備好，持續學習、消化、產出與記錄，當需要回顧時就不用去想自己到底做了些什麼了。</p>\n<p>最近看到一句話很喜歡，<br>\nDon't tell people your plans, show them your results.</p>\n<p>有種<strong>做了才是你的</strong>的感覺，送給大家，謝謝收看。</p>\n",
      "date_published": "2022-04-10T00:00:00-00:00"
    },{
      "id": "https://hero19931012.github.io/posts/11ty-deployment/",
      "url": "https://hero19931012.github.io/posts/11ty-deployment/",
      "title": "11ty 部落格部署紀錄",
      "content_html": "<p>受到 <a href=\"https://pse.is/3vf88q\">「星巴哥文章推薦」開發全記錄 — 從 Hexo 到 11ty</a> 與 <a href=\"https://pse.is/3uztdr\">除了 hexo，也可以考慮用 eleventy 來寫技術部落格 - Huli</a> 的啟發，決定動手架一個想了很久但都沒做的個人部落格。</p>\n<h3 id=\"%E7%92%B0%E5%A2%83\">環境 <a class=\"direct-link\" href=\"#%E7%92%B0%E5%A2%83\">#</a></h3>\n<p>透過 <a href=\"https://github.com/google/eleventy-high-performance-blog\">google/eleventy-high-performance-blog</a> 產生靜態網站，部署在 GitHub Pages 上。</p>\n<h3 id=\"%E6%AD%A5%E9%A9%9F\">步驟 <a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F\">#</a></h3>\n<h4 id=\"1.-%E5%BB%BA%E7%AB%8B-repository\">1. 建立 repository <a class=\"direct-link\" href=\"#1.-%E5%BB%BA%E7%AB%8B-repository\">#</a></h4>\n<p>用 <a href=\"https://github.com/google/eleventy-high-performance-blog\">high performance blog template</a> 當作 template 製作一個自己的 repo，然後 clone 到 local</p>\n<h4 id=\"2.-%E8%A8%AD%E5%AE%9A-github-actions\">2. 設定 GitHub Actions <a class=\"direct-link\" href=\"#2.-%E8%A8%AD%E5%AE%9A-github-actions\">#</a></h4>\n<p>參考 <a href=\"https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/\">Eleventy and Github pages</a> 設定 repo 在 commit 之後要執行的 actions。在編輯器中打開 <code>.github/workflows/build-and-test.yaml</code>，加入一個 deploy 的 step:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Runs build and test</span><br><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CI<br><br><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span><br>\t <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span><br>  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span><br>\t <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span><br><br><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span><br>\t <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest<br><br>\t <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span><br>\t\t  <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>12.x<span class=\"token punctuation\">,</span> 14.x<span class=\"token punctuation\">]</span><br><br>\t <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2<br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $matrix.node<span class=\"token punctuation\">-</span>version<br>\t\t  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1<br>\t\t  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>\t\t\t <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $matrix.node<span class=\"token punctuation\">-</span>version<br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install<br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build<span class=\"token punctuation\">-</span>ci<br><br>\t\t<span class=\"token comment\"># 加入下面部署的 action</span><br>\t\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy<br>\t\t  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3<br>\t\t  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>\t\t\t <span class=\"token key atrule\">deploy_key</span><span class=\"token punctuation\">:</span> $secrets.ACTIONS_DEPLOY_KEY<br>\t\t\t <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site</code></pre>\n<p><code>secrets.ACTIONS_DEPLOY_KEY</code> 待會會在 GitHub 上面設定。</p>\n<h4 id=\"3.-%E8%A8%AD%E5%AE%9A%E5%85%A8%E5%9F%9F-path-prefix\">3. 設定全域 path prefix <a class=\"direct-link\" href=\"#3.-%E8%A8%AD%E5%AE%9A%E5%85%A8%E5%9F%9F-path-prefix\">#</a></h4>\n<p>在 GitHub Pages 上部署，會有一個屬於自己的 domain <code>username.github.io</code>，gh-pages 透過增加一層 subdomain 來區分不同的 repo，如果要訪問一個路徑 <code>path</code>，必須用 <code>username.github.io/repo-name/path</code>，才能正確存取，因此需要將專案裡所有的 link 加上一個 prefix。</p>\n<p>打開 <code>.eleventy.js</code>，找到最下面 return 的部分，可以看到 subdirectory 的說明，把原本被註解的 <code>pathPrefix: &quot;/&quot;</code> 取消註解，改成 repo name 就可以了。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// If your site lives in a different subdirectory, change this.</span><br><span class=\"token comment\">// Leading or trailing slashes are all normalized away, so don’t worry about those.</span><br><br><span class=\"token comment\">// If you don’t have a subdirectory, use \"\" or \"/\" (they do the same thing)</span><br><span class=\"token comment\">// This is only used for link URLs (it does not affect your file structure)</span><br><span class=\"token comment\">// Best paired with the `url` filter: https://www.11ty.io/docs/filters/url/</span><br><br><span class=\"token comment\">// You can also pass this in on the command line using `--pathprefix`</span><br>pathPrefix<span class=\"token operator\">:</span> <span class=\"token string\">\"/repo-name\"</span></code></pre>\n<h4 id=\"4.-%E7%94%A2%E7%94%9F%E8%88%87%E8%A8%AD%E5%AE%9A-deploy-key\">4. 產生與設定 Deploy key <a class=\"direct-link\" href=\"#4.-%E7%94%A2%E7%94%9F%E8%88%87%E8%A8%AD%E5%AE%9A-deploy-key\">#</a></h4>\n<p>終端機中用下面的指令產生 2 支檔案：<strong>gh-pages.pub</strong> (public key) 和 <strong>gh-pages</strong> (private key)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -t rsa -b <span class=\"token number\">4096</span> -C <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> config user.email<span class=\"token variable\">)</span></span>\"</span> -f gh-pages -N <span class=\"token string\">\"\"</span></code></pre>\n<p>進入 repo Settings 頁面</p>\n<p><img src=\"/img/11ty-deployment/settings-tab.png\" alt=\"settings-tab\"></p>\n<p>選擇 Security &gt; Deploy Keys &gt; Add deploy key</p>\n<p><img src=\"/img/11ty-deployment/deploy-key.png\" alt=\"deploy-key\"></p>\n<p>填入 title 與 key (複製 gh-pages.pub 的內容)，然後勾選 <code>Allow write access</code>，允許修改權限</p>\n<p><img src=\"/img/11ty-deployment/add-deploy-key.png\" alt=\"add-deploy-key\"></p>\n<p>接著到 Security &gt; Secrets &gt; Actions，點選 New repository secret，將 Name 填入 ACTIONS_DEPLOY_KEY，key 則複製 gh-pages 的內容貼上</p>\n<p><img src=\"/img/11ty-deployment/add-secret.png\" alt=\"add-secret\"></p>\n<h4 id=\"5.-commit-%E4%B8%A6%E6%8E%A8%E4%B8%8A-github\">5. Commit 並推上 GitHub <a class=\"direct-link\" href=\"#5.-commit-%E4%B8%A6%E6%8E%A8%E4%B8%8A-github\">#</a></h4>\n<p>回到本機，先把剛剛的修改 commit，然後 git push 上 Github</p>\n<h4 id=\"6.-%E7%A2%BA%E8%AA%8D-action-%E6%9C%89%E6%AD%A3%E5%B8%B8%E5%9F%B7%E8%A1%8C\">6. 確認 Action 有正常執行 <a class=\"direct-link\" href=\"#6.-%E7%A2%BA%E8%AA%8D-action-%E6%9C%89%E6%AD%A3%E5%B8%B8%E5%9F%B7%E8%A1%8C\">#</a></h4>\n<p>檢查 repo Actions 頁面，可以看到所有正在執行或之前已經跑好的 workflows，並會根據 commit 來命名，這邊會看到 2 個分別是 CI 與 CodeQL 的 workflow，是 eleventy-high-performance-blog 內建的</p>\n<p><img src=\"/img/11ty-deployment/default-actions.png\" alt=\"default-actions\"></p>\n<p>這 2 個跑好後會出現第 3 個名為 pages-build-deployment 的 workflow，是將網站部署到 gh-pages 的 workflow</p>\n<p><img src=\"/img/11ty-deployment/deploy-action.png\" alt=\"deploy-action\"></p>\n<p>點進去可以看 log 了解現在在什麼階段，完成後在 deploy 的區塊下會有部署完的網址，沒意外是 <code>https://username.github.io/repo-name</code></p>\n<p><img src=\"/img/11ty-deployment/deploy-action-detail.png\" alt=\"deploy-action-detail\"></p>\n<h4 id=\"7.-%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90\">7. 部署完成 <a class=\"direct-link\" href=\"#7.-%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90\">#</a></h4>\n<p>網址列輸入該網址，沒出現 404 而是以下畫面的話就是部署成功了</p>\n<p><img src=\"/img/11ty-deployment/deploy-success.png\" alt=\"deploy-success\"></p>\n<h3 id=\"%E5%BE%8C%E8%A8%98\">後記 <a class=\"direct-link\" href=\"#%E5%BE%8C%E8%A8%98\">#</a></h3>\n<p>這篇記錄只提到如何透過 GitHub Pages 搭配 GitHub Actions 來部署 11ty 網站，沒提到設計與客製頁面的開發是由於我只想先快速簡單弄一個可以放筆記的平台，所以目前都還沒客製自己的頁面，之後有需要會慢慢新增。</p>\n<p>然後部署在 GitHub Pages 上有一個已知但不知道如何解決的問題，就是圖片在 markdown 裡面沒辦法套用 path prefix 的設定，也就會抓不到圖，猜測如果有買 domain 應該就可以解決這個問題，但我沒有 domain，所以目前只能 workaround，就是利用 11ty 的 markdown 會先經過 liquid template engine 編譯的設定，直接在 markdown 的圖片路徑上使用 filter，寫起來如下 (不含 backslash)：</p>\n<pre class=\"language-md\"><code class=\"language-md\">![demo](\\{\\{ '/img/first-post/abc.png' | url \\}\\})</code></pre>\n<p>缺點就是不太好看，也沒辦法 preview (還是可以用 npm run watch 在瀏覽器裡 preview 啦)，我研究了一整天，想要找到能夠對 markdown 裡面的 img 路徑加上 prefix 的方法，但是沒找到，甚至還想說自己寫個 markdown-it 的 plugin 好了，後來覺得太麻煩作罷，就先接受這樣子了。</p>\n<blockquote>\n<p><em>2022/4/10 更新，我後來還是買了域名，所以就可以照正常方式使用，不需透過 liquid 預先編輯。</em></p>\n</blockquote>\n<p>以上就是粗略的 11ty 部落格架設記錄。</p>\n<h3 id=\"references\">References <a class=\"direct-link\" href=\"#references\">#</a></h3>\n<p><a href=\"https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/\">Eleventy and Github pages | LinkedIn</a></p>\n<p><a href=\"https://www.rockyourcode.com/how-to-deploy-eleventy-to-github-pages-with-github-actions/\">How to Deploy Eleventy to GitHub Pages With GitHub Actions | rockyourcode</a></p>\n<p><a href=\"https://github.com/google/eleventy-high-performance-blog\">google/eleventy-high-performance-blog: A high performance blog template for the 11ty static site generator. (github.com)</a></p>\n",
      "date_published": "2022-02-20T00:00:00-00:00"
    }
  ]
}
